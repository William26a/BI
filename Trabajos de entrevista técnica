{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMEUPfhRukXpKHfIgUBi6c1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/William26a/BI/blob/main/Trabajos%20de%20entrevista%20t%C3%A9cnica\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Escribir un programa que muestre en pantalla los números del 1 al 100, sustituyendo los multiplos de 3 por la palabra \"fizz\", los multiplos de 5 por \"buzz\" y los multiplos de ambos, es decir, los multiplos de 3 y 5 por la palabra \"fizzbuzz\""
      ],
      "metadata": {
        "id": "Pnu3EV6smFoC"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "3PVkycgsmDof"
      },
      "outputs": [],
      "source": [
        "def is_multiple(a, b):\n",
        "    return a % b == 0\n",
        "\n",
        "def print_fizz_buzz():\n",
        "    for n in range(1,101):\n",
        "      if is_multiple(n, 3) \\\n",
        "        and is_multiple(n, 5):\n",
        "        print(f'{n}:fizzbuzz')\n",
        "      elif is_multiple(n, 3):\n",
        "        print(f'{n}:fizz')\n",
        "      elif is_multiple(n, 5):\n",
        "        print(f'{n}:buzz')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def main():\n",
        "    print_fizz_buzz()\n",
        "\n",
        "if __name__ == '__main__':\n",
        "  main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "lJyX26RspzLt",
        "outputId": "dfc3c219-575b-4e8d-9448-57aa0c7eae9f"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3:fizz\n",
            "5:buzz\n",
            "6:fizz\n",
            "9:fizz\n",
            "10:buzz\n",
            "12:fizz\n",
            "15:fizzbuzz\n",
            "18:fizz\n",
            "20:buzz\n",
            "21:fizz\n",
            "24:fizz\n",
            "25:buzz\n",
            "27:fizz\n",
            "30:fizzbuzz\n",
            "33:fizz\n",
            "35:buzz\n",
            "36:fizz\n",
            "39:fizz\n",
            "40:buzz\n",
            "42:fizz\n",
            "45:fizzbuzz\n",
            "48:fizz\n",
            "50:buzz\n",
            "51:fizz\n",
            "54:fizz\n",
            "55:buzz\n",
            "57:fizz\n",
            "60:fizzbuzz\n",
            "63:fizz\n",
            "65:buzz\n",
            "66:fizz\n",
            "69:fizz\n",
            "70:buzz\n",
            "72:fizz\n",
            "75:fizzbuzz\n",
            "78:fizz\n",
            "80:buzz\n",
            "81:fizz\n",
            "84:fizz\n",
            "85:buzz\n",
            "87:fizz\n",
            "90:fizzbuzz\n",
            "93:fizz\n",
            "95:buzz\n",
            "96:fizz\n",
            "99:fizz\n",
            "100:buzz\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dado un texto como input, calcular cuantas veces se repite cada palabra en el texto"
      ],
      "metadata": {
        "id": "sFISMEqzrmY7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "\n",
        "# Función para normalizar la frase\n",
        "def norm_phrase(phrase):\n",
        "    regex = r'[.,%$!=$]'  # Caracteres a eliminar\n",
        "    return re.sub(regex, \"\", phrase).lower()\n",
        "\n",
        "# Función para contar palabras\n",
        "def store_dict(phrase):\n",
        "    words_dict = {}\n",
        "    for word in norm_phrase(phrase).split():\n",
        "        if word in words_dict:\n",
        "            words_dict[word] += 1\n",
        "        else:\n",
        "            words_dict[word] = 1\n",
        "    return words_dict\n",
        "\n",
        "# Función para imprimir los resultados\n",
        "def pretty_print(words_dict):\n",
        "    print(\"Las palabras se repiten: \\n\")\n",
        "    for word, times in words_dict.items():\n",
        "        print(f\"'{word}': {times} veces.\")\n",
        "\n",
        "# Función principal\n",
        "def main(phrase):\n",
        "    pretty_print(store_dict(phrase))\n",
        "\n",
        "# Bloque de ejecución principal\n",
        "if __name__ == '__main__':\n",
        "    phrase = \"\"\"Esta frase tiene varias varias varias cosas que se repiten\n",
        "    repiten. además, tambien tiene comas comas\"\"\"\n",
        "    main(phrase)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "mbDdjmvsr1bT",
        "outputId": "9c9e19eb-e143-40dc-faff-e7a510186185"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Las palabras se repiten: \n",
            "\n",
            "'esta': 1 veces.\n",
            "'frase': 1 veces.\n",
            "'tiene': 2 veces.\n",
            "'varias': 3 veces.\n",
            "'cosas': 1 veces.\n",
            "'que': 1 veces.\n",
            "'se': 1 veces.\n",
            "'repiten': 2 veces.\n",
            "'además': 1 veces.\n",
            "'tambien': 1 veces.\n",
            "'comas': 2 veces.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Crea una sucesión de fibonacci"
      ],
      "metadata": {
        "id": "6MhNCzMI6wsz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def fibonacci(n):\n",
        "  secuencia = [0,1]\n",
        "  while len(secuencia)<n:\n",
        "      siguiente_valor = secuencia[-1] + secuencia[-2]\n",
        "      secuencia.append(siguiente_valor)\n",
        "  return(secuencia)"
      ],
      "metadata": {
        "id": "CLOF4qXA60-u"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(fibonacci(20))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "sx4qmleO7lDu",
        "outputId": "49020c25-c216-4f26-87c2-650d8870e7e2"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se le da una matriz de enteros nums. Inicialmente, se le ubica en el\n",
        "primer índice de la matriz, y cada elemento en la matriz representa su\n",
        "longitud máxima de salto en esa posición.\n",
        "\n",
        "Devuelve verdadero si puede llegar al último índice, o falso en caso\n",
        "contrario.\n",
        "\n",
        "Ejemplo 1:\n",
        "\n",
        "Entrada: nums = [2,3,1,1,4]\n",
        "\n",
        "Salida: verdadero\n",
        "Explicación: Salta 1 paso del índice 0 al 1, luego 3\n",
        "pasos hasta el último índice.\n",
        "\n",
        "Ejemplo 2:\n",
        "\n",
        "Entrada: nums = [3,2,1,0,4]\n",
        "\n",
        "Salida: falso\n",
        "Explicación: Siempre llegarás al índice 3 sin\n",
        "importar qué. Su longitud máxima de salto es 0, lo que\n",
        "hace imposible llegar al último índice."
      ],
      "metadata": {
        "id": "qsxZiSFs-tTx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "*1° FORMA*"
      ],
      "metadata": {
        "id": "CIklHPx6A6Vw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def puede_llegar(nums):\n",
        "    alcance_max = 0\n",
        "    objetivo = len(nums) - 1\n",
        "\n",
        "    for i, salto in enumerate(nums):\n",
        "      if i > alcance_max:\n",
        "        return False\n",
        "      alcance_max = max(alcance_max, i + salto)\n",
        "      if alcance_max >= objetivo:\n",
        "        return True\n",
        "\n",
        "    return False"
      ],
      "metadata": {
        "id": "Y3vyJ5Q1_Jpu"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(puede_llegar([2,3,1,1,4]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AfT534YbA5c0",
        "outputId": "5bbf7588-28f5-4101-aa77-c311d85a6ec5"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(puede_llegar([3,2,1,0,4]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "330MH1mlBo86",
        "outputId": "2860727b-5fb0-42a7-bc41-aae86bf81d35"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*2° FORMA*"
      ],
      "metadata": {
        "id": "GtYOv8vjBvqY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from typing import List"
      ],
      "metadata": {
        "id": "d0Geb8qREPod"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Solution:\n",
        "    def canJump(self, nums: List[int]) -> bool:\n",
        "        lastOne = len(nums) - 1  # Última posición objetivo\n",
        "\n",
        "        # Iteramos desde el penúltimo hasta el primer índice\n",
        "        for i in range(len(nums) - 2, -1, -1):\n",
        "            if i + nums[i] >= lastOne:  # Si desde i podemos llegar al objetivo\n",
        "                lastOne = i  # Actualizamos la meta\n",
        "\n",
        "        return lastOne == 0  # Si la meta es el índice 0, es alcanzable\n"
      ],
      "metadata": {
        "id": "RgLMtuT6B1gI"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sol = Solution()"
      ],
      "metadata": {
        "id": "GN6B7ufsE3Ay"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(sol.canJump([2,3,1,1,4]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wy1kDMv7D04w",
        "outputId": "2c2cbe99-a9ab-4806-8775-a522739df504"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(sol.canJump([3,2,1,0,4]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9erlV1YeE-JJ",
        "outputId": "9074b29e-3e52-4175-daba-f6f3281d1810"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En una lista de diferentes elementos y ordenados en seríe, crea una sintaxis en donde se aplique el reverso\n",
        "\n",
        "Ejemplo\n",
        "arreglo: 1,3,8,9,6\n",
        "salida: 6,9,8,3,1"
      ],
      "metadata": {
        "id": "SXhNmS3EFh6X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def reverse_list(lista):\n",
        "    inicio = 0\n",
        "    fin = len(lista) -1\n",
        "    while inicio < fin:\n",
        "        lista[inicio], lista[fin] = lista[fin], lista[inicio]\n",
        "\n",
        "\n",
        "        inicio += 1\n",
        "        fin -= 1\n",
        "\n",
        "    return lista\n",
        "\n",
        "lista_original = [1,2,3,4,8]\n",
        "print(reverse_list(lista_original))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jnqhJ3zbF4cb",
        "outputId": "c83e4e57-1dda-482f-8a04-e9e4b4d98129"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[8, 4, 3, 2, 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En una lista ordenada, encuentrame un elemento especídfico de la misma, sin alterar el orden"
      ],
      "metadata": {
        "id": "kRR_YEZuS1gf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "*1° FORMA*"
      ],
      "metadata": {
        "id": "dHYlo6gldlBv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def busqueda_binaria(lista,valor):\n",
        "    izquierda = 0\n",
        "    derecha = len(lista) - 1\n",
        "\n",
        "    while izquierda <= derecha:\n",
        "        medio = (izquierda + derecha) // 2\n",
        "\n",
        "        if lista[medio] == valor:\n",
        "            return medio\n",
        "        elif lista[medio] < valor:\n",
        "            izquierda = medio + 1\n",
        "        else:\n",
        "            derecha = medio - 1\n",
        "\n",
        "    return -1 #Valor no encontrado\n",
        "\n",
        "lista = [2, 4, 6, 8, 23, 45, 46,\n",
        "         47, 56, 78, 90, 100, 102, 154]\n",
        "\n",
        "valor_buscado = 100\n",
        "\n",
        "resultado = busqueda_binaria(lista, valor_buscado)\n",
        "\n",
        "if resultado != -1:\n",
        "    print(\"El valor\", valor_buscado,\n",
        "          \"fue encontrado en la posición\", resultado)\n",
        "else:\n",
        "    print(\"El valor\", valor_buscado,\n",
        "          \"no fue encontrado en la lista.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zn2jPX8fTIXL",
        "outputId": "062b879e-6471-4d80-8f73-8ddce1b10248"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El valor 100 fue encontrado en la posición 11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*2° FORMA*"
      ],
      "metadata": {
        "id": "eyx9WjjQdrkm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import bisect"
      ],
      "metadata": {
        "id": "WD8tyv9ndrP9"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lista = [2, 4, 6, 8, 23, 45, 46,\n",
        "         47, 56, 78, 90, 100, 102, 154]"
      ],
      "metadata": {
        "id": "mAti0xm5d3pQ"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "resultado = bisect.bisect_left(lista,100)"
      ],
      "metadata": {
        "id": "wxJmNrS0d-OD"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(resultado)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eWt9A_fhePJt",
        "outputId": "bd4b8e31-17d1-43b2-e7b9-5d6edf65374c"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11\n"
          ]
        }
      ]
    }
  ]
}